library(devtools)
devtools::load_all()
document()
devtools::load_all()
set.seed(1)
dat = matrix(round(rnorm(9000,mean = 1, sd = 1)),ncol=100)
dat[which(dat < 1)] = 0
colnames(dat) <- paste('Sample', 1:100)
rownames(dat) <- paste( 'gene', 1:100)
x <- as_RcppTestArea( dat )
expect_equal( class( x )[1], c('RcppTestArea') )
x
show(x)
?print
document()
document()
document()
devtools::load_all()
x
test()
test()
set.seed(1)
dat = matrix(round(rnorm(9000,mean = 1, sd = 1)),ncol=100)
dat[which(dat < 1)] = 0
colnames(dat) <- paste('Sample', 1:100)
rownames(dat) <- paste( 'gene', 1:90)
x <- as_RcppTestArea( dat )
x
print(x)
show(x)
scored = ZScore(x@dat)
scored[1,]
sd(scored[1,])
sd(scored[1,which(scored[1,]!= 0)])
row1 = scored[1,which(scored[1,]!= 0)]
row1
row1 -13
sd(row1 -13)
mean(row1 -13)
row1 = scored[which(scored[,1]!= 0),1]
mean(row1 -13)
sd(row1 -13)
devtools::load_all()
scored = ZScore(x@dat)
row1 = scored[which(scored[,1]!= 0),1]
sd(row1 -13)
mean(row1 -13)
row1 = scored[1,which(scored[1,]!= 0)]
mean(row1 -13)
sd(row1 -13)
devtools::load_all()
scored = ZScore(x@dat)
devtools::load_all()
scored = ZScore(x@dat)
scored = ZScore(x@dat, F)
devtools::load_all()
devtools::load_all()
scored = ZScore(x@dat, F)
devtools::load_all()
scored = ZScore(x@dat, F)
score
scored
row1 = scored[1,which(scored[1,]!= 0)]
row1
row1 -13
sd(row1 -13)
mean(row1 -13)
row1 = scored[which(scored[,1]!= 0),1]
sd(row1 -13)
mean(row1 -13)
devtools::load_all()
devtools::load_all()
devtools::load_all()
row1 = scored[which(scored[,1]!= 0),1]
mean(row1 -13)
sd(row1 -13)
devtools::load_all()
devtools::load_all()
scored = ZScore(x@dat, F)
row1 = scored[which(scored[,1]!= 0),1]
sd(row1 -13)
mean(row1 -13)
row1 = scored[1,which(scored[1,]!= 0)]
mean(row1 -13)
sd(row1 -13)
row1 = scored[1,]
sd(row1 -13)
mean(row1 -13)
length(which(row1 == 0)
)
devtools::load_all()
scored = ZScore(x@dat)
q()
library(devtools)
devtools::load_all()
scored = ZScore(x@dat, F)
length(which(x@dat[2,] != 0 ))
length(which(x@dat[,2] != 0 ))
length(which(x@dat[,1] != 0 ))
devtools::load_all()
devtools::load_all()
q()
devtools::load_all()
scored = ZScore(x@dat, F)
devtools::load_all()
q(9
n
q()
devtools::load_all()
devtools::test()
devtools::test()
q()
libraray(devtools)
library(devtools)
load_all()
set.seed(1)
ncol = 100
nrow=90
dat = matrix(round(rnorm(ncol*nrow,mean = 0, sd = 1)),ncol=ncol)
dat[which(dat < 1)] = 0
colnames(dat) <- paste('Sample', 1:ncol)
rownames(dat) <- paste( 'gene', 1:nrow)
x <- as_FastWilcoxTest( dat )
ret = NormalzeCells(x@dat, 30)
class(ret)
plot(x@dat[,1], ret[,1])
colSums(x@dat)
Matrix::colSums(x@dat)
Matrix::colSums(ret)
load_all()
ret = NormalzeCells(x@dat, 30)
q()
libraray(devtools)
library(devtools)
load_all()
ret = NormalzeCells(x@dat, 30)
load_all()
q(9
n
n
q()
library(devtools)
load_all()
ret = NormalzeCells(x@dat, 30)
Matrix::colSums(ret)
load_all()
q()
x
set.seed(1)
ncol = 100
nrow=90
dat = matrix(round(rnorm(ncol*nrow,mean = 5, sd = 7)),ncol=ncol)
dat[which(dat < 1)] = 0
colnames(dat) <- paste('Sample', 1:ncol)
rownames(dat) <- paste( 'gene', 1:nrow)
x <- as_FastWilcoxTest( dat )
rm(dat)
q()
 devtools::load_all()
devtools::test(filter='normalize')
q()
libraray(devtools)
library(devtools)
load_all()
load_all()
system.time({ rolled = rollSum( x@dat, 10 ) })
colnames(rolled) = colnames(x@dat)[(n-1):ncol(x@dat)]
rownames(rolled) = rownames(x@dat)
rollSumR <- function( x, n) {
print( length(x) )
unlist(lapply( (n+1):length(x) , function(a) { sum(x[(a-n):n] )} ))
}
cmp = t(apply( x@dat, 1, rollSumR, 10) )
colnames(cmp) = colnames(x@dat)[(n-1):ncol(x@dat)]
expect_equal( rolled, cmp)n = 10
system.time({ rolled = rollSum( x@dat, n ) })
colnames(rolled) = colnames(x@dat)[(n-1):ncol(x@dat)]
rownames(rolled) = rownames(x@dat)
rollSumR <- function( x, n) {
print( length(x) )
unlist(lapply( (n+1):length(x) , function(a) { sum(x[(a-n):n] )} ))
}
cmp = t(apply( x@dat, 1, rollSumR, n) )
colnames(cmp) = colnames(x@dat)[(n-1):ncol(x@dat)]
expect_equal( rolled, cmp)n = 10
system.time({ rolled = rollSum( x@dat, n ) })
colnames(rolled) = colnames(x@dat)[(n-1):ncol(x@dat)]
rownames(rolled) = rownames(x@dat)
rollSumR <- function( x, n) {
print( length(x) )
unlist(lapply( (n+1):length(x) , function(a) { sum(x[(a-n):n] )} ))
}
cmp = t(apply( x@dat, 1, rollSumR, n) )
colnames(cmp) = colnames(x@dat)[(n-1):ncol(x@dat)]
expect_equal( rolled, cmp)
n = 10
system.time({ rolled = rollSum( x@dat, n ) })
colnames(rolled) = colnames(x@dat)[(n-1):ncol(x@dat)]
rownames(rolled) = rownames(x@dat)
rollSumR <- function( x, n) {
print( length(x) )
unlist(lapply( (n+1):length(x) , function(a) { sum(x[(a-n):n] )} ))
}
cmp = t(apply( x@dat, 1, rollSumR, n) )
colnames(cmp) = colnames(x@dat)[(n-1):ncol(x@dat)]
expect_equal( rolled, cmp)
devtools:document()
document()
expect_equal( rolled, cmp)
test(filter='FastCor')
load_all()
load_all()
context( 'roll sum')
n = 10
system.time({ rolled = rollSum( x@dat, n ) })
colnames(rolled) = colnames(x@dat)[(n-1):ncol(x@dat)]
rownames(rolled) = rownames(x@dat)
rollSumR <- function( x, n) {
print( length(x) )
unlist(lapply( (n+1):length(x) , function(a) { sum(x[(a-n):n] )} ))
}
cmp = t(apply( x@dat, 1, rollSumR, n) )
colnames(cmp) = colnames(x@dat)[(n-1):ncol(x@dat)]
expect_equal( rolled, cmp)
cmp
rolled
colnames(rolled) = colnames(x@dat)[(n-1):ncol(x@dat)]
dim(rolled)
length((n-1):ncol(x@dat))
colnames(rolled) = colnames(x@dat)[(n):ncol(x@dat)]
length((n-1):ncol(x@dat))
length((n):ncol(x@dat))
length((n+1):ncol(x@dat))
colnames(rolled) = colnames(x@dat)[(n+1):ncol(x@dat)]
dim(cmp)
context( 'roll sum')
n = 10
system.time({ rolled = rollSum( x@dat, n ) })
colnames(rolled) = colnames(x@dat)[(n+1):ncol(x@dat)]
rownames(rolled) = rownames(x@dat)
rollSumR <- function( x, n) {
print( length(x) )
unlist(lapply( (n+1):length(x) , function(a) { sum(x[(a-n):n] )} ))
}
cmp = t(apply( x@dat, 1, rollSumR, n) )
colnames(cmp) = colnames(x@dat)[(n+1):ncol(x@dat)]
expect_equal( rolled, cmp)
system.time({ rolled = rollSum( Matrix::t(x@dat), n ) })
system.time({ cmp = t(apply( Matrix::t(x@dat), 1, rollSumR, n) ) })
system.time({ cmp = t(apply( Matrix::t(x@dat), 1, rollSumR, n) ) })
system.time({ rolled = rollSum( Matrix::t(x@dat), n ) })
dim(rolled)
dim(cmp)
rolled[1:10,1:10]
cmp[1:10,1:10]
rownames(cmp) = NULL
expect_equal( rolled, cmp)
expect_equal( rolled[1:10,1:10], cmp[1:10,1:10])
rolled[1:10,1:10]
 cmp[1:10,1:10]
sum(x@dat[2,1:10])
rollSumR <- function( x, n) {
print( length(x) )
unlist(lapply( (n+1):length(x) , function(a) { browser();sum(x[(a-n):n] )} ))
}
system.time({ cmp = t(apply( Matrix::t(x@dat), 1, rollSumR, n) ) })
a
a-n
a-n:n
(a-n):n
length((a-n):n)
sum(x[(a-n):n] )
Q
load_all()
system.time({ rolled = rollSum( Matrix::t(x@dat), n ) })
load_all()
system.time({ rolled = rollSum( Matrix::t(x@dat), n ) })
load_all()
system.time({ rolled = rollSum( Matrix::t(x@dat), n ) })
load_all()
system.time({ rolled = rollSum( Matrix::t(x@dat), n ) })
 rolled = rollSum( Matrix::t(x@dat), n )
 rolled = rollSum( Matrix::t(x@dat), n )
rolled[1:10,1:10]
q()
devtools::load_all()
CorNormalMatrix( t( rolled), 1:nrow(rolled))
devtools::load_all()
CorNormalMatrix( t( rolled), 1:nrow(rolled))
q()
